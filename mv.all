#!/usr/bin/python3.10

import os
import hashlib
import shutil
from PIL import Image
from progress.bar import IncrementalBar
import subprocess
import mimetypes
import magic
import datetime
import json

mime = magic.Magic(mime=True)


source='/home/den/Downloads/'
p_vids='/home/den/p_vids/'
files = [f for f in os.listdir(source) if os.path.isfile(os.path.join(source, f))]

dest_pics = '/Starfire/2_clean_pics/'
dest_vids = '/Starfire/4_video_clean/'
dest_gifs = '/Starfire/GIFs/'
dest_books = '/Joi/Books/'

def hashit(inputfile):
	h = hashlib.sha1()
	with open(inputfile, "rb") as f:
		while chunk := f.read(8192):
			h.update(chunk)
		hash = h.hexdigest()
		return hash

webp_2_gif = 0
webp_2_jpg = 0
webm_2_mp4 = 0
mov_2_mp4 = 0
jpgs = 0
mp4s = 0
pngs = 0
gifs = 0
pdfs = 0
epubs = 0
t_bytes = 0
porn = 0
dupes_found = 0

clean_bar = IncrementalBar('Cleaning:', max=len(files))
for each in files:
	clean_bar.next()
	if each.lower().endswith('.webp'):
		img = Image.open(os.path.join(source, each))
		iffi = getattr(img, "is_animated", False)
		if iffi:
			img.info.pop('background', None)
			img.save(each.replace(".webp",".gif"), 'gif', save_all=True)
			os.remove(os.path.join(source, each))
			webp_2_gif = webp_2_gif + 1
		else:
			img.save(each.replace(".webp",".jpg"), 'jpeg')
			os.remove(os.path.join(source, each))
			webp_2_jpg = webp_2_jpg + 1
	elif each.lower().endswith('.webm'):
		nm = os.path.splitext(each)
		subprocess.run(['ffmpeg','-y','-i',os.path.join(source,each), (source+nm[0]+'.mp4')],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)
		os.remove(os.path.join(source, each))
		webm_2_mp4 = webm_2_mp4 + 1
	elif each.lower().endswith('.mov'):
		nm = os.path.splitext(each)
		subprocess.run(['ffmpeg','-y','-i',os.path.join(source,each), (source+nm[0]+'.mp4')],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)
		os.remove(os.path.join(source, each))
		mov_2_mp4 = mov_2_mp4 + 1
	else:
		pass
clean_bar.finish()
files = [f for f in os.listdir(source) if os.path.isfile(os.path.join(source, f))]
p_files = [f for f in os.listdir(p_vids) if os.path.isfile(os.path.join(p_vids,f))]

with open('/home/den/hashdict.json') as d:
	data = d.read()
hashdict = json.loads(data)

hash_mv_bar = IncrementalBar("Hashing and moving:", max=(len(files)+len(p_files)))
for each in files:
	if each.lower().endswith('.jpg'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.jpg') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.jpg')
			jpgs = jpgs + 1
			hashdict[(hash + '.jpg')] = str(datetime.datetime.now())
	elif each.lower().endswith('.jpeg'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.jpg') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.jpg')
			jpgs = jpgs + 1
			hashdict[(hash + '.jpg')] = str(datetime.datetime.now())
	elif each.lower().endswith('.mp4'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.mp4') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.mp4')
			mp4s = mp4s + 1
			hashdict[(hash + '.mp4')] = str(datetime.datetime.now())
	elif each.lower().endswith('.png'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.png') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.png')
			pngs = pngs + 1
			hashdict[(hash + '.png')] = str(datetime.datetime.now())
	elif each.lower().endswith('.gif'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.gif') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.gif')
			gifs = gifs + 1
			hashdict[(hash + '.gif')] = str(datetime.datetime.now())
	elif each.lower().endswith('.gifv'):
		hash_mv_bar.next()
		hash = hashit(os.path.join(source,each))
		if (hash + '.gif') in hashdict:
			os.remove(os.path.join(source,each))
			dupes_found = dupes_found + 1
		else:
			t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
			shutil.move(os.path.join(source,each), dest_pics + hash + '.gif')
			gifs = gifs + 1
			hashdict[(hash + '.gif')] = str(datetime.datetime.now())
	elif each.lower().endswith('.pdf'):
		hash_mv_bar.next()
		t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
		shutil.move(os.path.join(source,each), os.path.join(dest_books,each))
		pdfs = pdfs + 1
	elif each.lower().endswith('.epub'):
		hash_mv_bar.next()
		t_bytes = t_bytes + os.path.getsize(os.path.join(source,each))
		shutil.move(os.path.join(source,each), os.path.join(dest_books,each))
		epubs = epubs + 1
	else:
		hash_mv_bar.next()
		pass
now = datetime.datetime.now()
newdir = os.path.join("/Starfire/Porn/",str(now))
os.mkdir(newdir)
for each in p_files:
	hash_mv_bar.next()
	t_bytes = t_bytes + os.path.getsize(os.path.join(p_vids,each))
	shutil.move(os.path.join(p_vids,each), os.path.join(newdir,each))
	porn = porn + 1

hash_mv_bar.finish()
t_GB = t_bytes/1073741824
t_MB = t_bytes/1048576
t_KB = t_bytes/1024
print("Webps converted to GIFs: " + str(webp_2_gif))
print("Webps converted to JPGs: " + str(webp_2_jpg))
print("Webms converted to MP4s: " + str(webm_2_mp4))
print("MOVs converted to MP4s: " + str(mov_2_mp4))
print("JPGs moved: " + str(jpgs))
print("PNGs moved: " + str(pngs))
print("GIFs moved: " + str(gifs))
print("MP4s moved: " + str(mp4s))
print("PDFs moved: " + str(pdfs))
print("EPUBs moved: " + str(epubs))
print("Porn moved: " + str(porn))
print("Dupes found: " + str(dupes_found))
if t_GB > 1:
	print("Total transfer = " + ("%.2f" % t_GB) + " GBs.")
elif t_MB > 1:
	print("Total transfer = " + ("%.2f" % t_MB) + " MBs.")
else: 
	print("Total transfer = " + ("%.2f" % t_KB) + " KBs.")

with open('/home/den/hashdict.json', 'w') as convert_file:
	convert_file.write(json.dumps(hashdict))	



		


